@{
    Layout = null;
    var mesAtual = DateTime.Today;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet" href="~/css/cron.css" />

<div style="display: flex;">
    <!-- Sidebar -->
    <div class="sidebar">
        <h3 style="margin-left: 10px;">Listas</h3>
        <div id="listContainer" class="sidebar-content">
            <!-- Listas serão renderizadas aqui -->
        </div>
    </div>

    <!-- Área principal do calendário -->
    <div style="flex: 1;">
        <div class="calendar-header">
            <button onclick="changeMonth(-1)"><i class="fas fa-chevron-left"></i></button>
            <span id="currentMonth"></span>
            <button onclick="changeMonth(1)"><i class="fas fa-chevron-right"></i></button>
        </div>
        <div class="calendar-grid" id="calendarGrid"></div>
    </div>
</div>

<!-- Modal -->
<div id="modalOverlay"></div>
<div id="eventModal">
   
    <h3>Gerenciar Eventos</h3>

    <div id="eventList"></div> <!-- Lista de eventos existentes -->

    <hr />

    <input type="text" id="eventTitle" placeholder="Título">
    <input type="time" id="eventTime">
    <input type="hidden" id="eventDate">
    <input type="hidden" id="editingIndex">

    <button class="save" onclick="saveEvent()">Salvar</button>
    <button class="cancel" onclick="closeModal()">Cancelar</button>
</div>

<script>
    let current = new Date();

    function renderCalendar() {
        const grid = document.getElementById("calendarGrid");
        grid.innerHTML = "";
        const month = current.getMonth();
        const year = current.getFullYear();
        document.getElementById("currentMonth").textContent = current.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });

        const firstDay = new Date(year, month, 1).getDay();
        const lastDate = new Date(year, month + 1, 0).getDate();

        const weekdays = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
        weekdays.forEach(d => {
            const cell = document.createElement("div");
            cell.className = "weekday";
            cell.textContent = d;
            grid.appendChild(cell);
        });

        for (let i = 0; i < firstDay; i++) {
            const empty = document.createElement("div");
            empty.className = "empty";
            grid.appendChild(empty);
        }

        for (let i = 1; i <= lastDate; i++) {
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
            const cell = document.createElement("div");
            cell.className = "day";
            cell.setAttribute("data-date", dateStr);
            cell.innerHTML = `<div class="day-number">${i}</div><div class="event-container"></div>`;
            cell.addEventListener("click", () => openModal(dateStr));
            grid.appendChild(cell);
        }

        renderEvents();
    }

    function changeMonth(delta) {
        current.setMonth(current.getMonth() + delta);
        renderCalendar();
    }

        function openModal(date) {
        document.getElementById("eventDate").value = date;
        document.getElementById("eventTitle").value = "";
        document.getElementById("eventTime").value = "";
        document.getElementById("editingIndex").value = "";

        const eventList = document.getElementById("eventList");
        eventList.innerHTML = "";

        const events = JSON.parse(localStorage.getItem("events") || "[]");
        const eventsForDate = events.filter((e, i) => e.date === date);

        if (eventsForDate.length > 0) {
            eventsForDate.forEach((e, index) => {
                const fullIndex = events.findIndex(ev => ev.date === date && ev.title === e.title && ev.time === e.time);
                const div = document.createElement("div");
                div.innerHTML = `${e.time} - ${e.title}
                    <button onclick="editEvent(${fullIndex})">Editar</button>
                    <button onclick="deleteEvent(${fullIndex})">Excluir</button>`;
                eventList.appendChild(div);
            });
        }

        // Mostrar modal e overlay
        document.getElementById("modalOverlay").style.display = "block";
        const modal = document.getElementById("eventModal");
        modal.classList.add("active");
    }

    function closeModal() {
        document.getElementById("modalOverlay").style.display = "none";
        document.getElementById("eventModal").classList.remove("active");
    }


    function saveEvent() {
        const title = document.getElementById("eventTitle").value;
        const time = document.getElementById("eventTime").value;
        const date = document.getElementById("eventDate").value;
        const editingIndex = document.getElementById("editingIndex").value;

        if (!title || !time) return alert("Preencha todos os campos!");

        let events = JSON.parse(localStorage.getItem("events") || "[]");

        if (editingIndex !== "") {
            // Editando
            events[editingIndex] = { title, time, date };
        } else {
            // Novo
            events.push({ title, time, date });
        }

           localStorage.setItem("events", JSON.stringify(events));
           renderCalendar();
           renderSidebar(); // Adicione isso
           closeModal();

    }

    function editEvent(index) {
        const events = JSON.parse(localStorage.getItem("events") || "[]");
        const e = events[index];
        document.getElementById("eventTitle").value = e.title;
        document.getElementById("eventTime").value = e.time;
        document.getElementById("eventDate").value = e.date;
        document.getElementById("editingIndex").value = index;
    }

    function deleteEvent(index) {
        if (!confirm("Deseja realmente excluir este evento?")) return;
        let events = JSON.parse(localStorage.getItem("events") || "[]");
        events.splice(index, 1);
           localStorage.setItem("events", JSON.stringify(events));
           renderCalendar();
           renderSidebar(); // Adicione isso
           openModal(document.getElementById("eventDate").value);

    }

    function renderEvents() {
        const events = JSON.parse(localStorage.getItem("events") || "[]");
        events.forEach(e => {
            const container = document.querySelector(`.day[data-date='${e.date}'] .event-container`);
            if (container) {
                const div = document.createElement("div");
                div.className = "event";
                div.textContent = `${e.time} - ${e.title}`;
                container.appendChild(div);
            }
        });
    }

        window.onload = function () {
        renderCalendar();
        renderSidebar(); // Adicione isso
    };


        function renderSidebar() {
        const month = current.getMonth();
        const year = current.getFullYear();
        const listContainer = document.getElementById("listContainer");
        listContainer.innerHTML = "";

          let events = JSON.parse(localStorage.getItem("events") || "[]");
        events = events.filter(e => {
        const evDate = new Date(e.date);
        return evDate.getMonth() === month && evDate.getFullYear() === year;
        });

        const grouped = {};
        for (const ev of events) {
            if (!grouped[ev.title]) grouped[ev.title] = [];
            grouped[ev.title].push(ev);
        }

        for (const title in grouped) {
            const listDiv = document.createElement("div");
            listDiv.className = "sidebar-list";

            const header = document.createElement("div");
            header.textContent = title;

            const toggleBtn = document.createElement("button");
            toggleBtn.className = "toggle-btn";
            toggleBtn.textContent = "+";

            const cardsDiv = document.createElement("div");
            cardsDiv.className = "sidebar-cards";
            cardsDiv.style.display = "none";

            grouped[title].forEach(ev => {
            const fullIndex = events.findIndex(e => e.date === ev.date && e.time === ev.time && e.title === ev.title);

            const card = document.createElement("div");
            card.className = "sidebar-card";
            card.innerHTML = `
            ${ev.time} (${ev.date})<br>
            <button onclick="editEvent(${fullIndex})">Editar</button>
            <button onclick="deleteEvent(${fullIndex})">Excluir</button>
            `;
            cardsDiv.appendChild(card);
            });



               toggleBtn.addEventListener("click", () => {
        const isVisible = cardsDiv.style.display === "block";
        cardsDiv.style.display = isVisible ? "none" : "block";
        toggleBtn.textContent = isVisible ? "+" : "-";
    });

            listDiv.appendChild(header);
            listDiv.appendChild(toggleBtn);
            listDiv.appendChild(cardsDiv);
            listContainer.appendChild(listDiv);
        }
    }
          const listDiv = document.createElement("div");
    listDiv.className = "sidebar-list";
    listDiv.style.display = "inline-flex";
    listDiv.style.alignItems = "center";
    listDiv.style.gap = "6px";

    const titleSpan = document.createElement("span");
    titleSpan.textContent = title;

    const toggleBtn = document.createElement("button");
    toggleBtn.className = "toggle-btn";
    toggleBtn.textContent = expandedLists.includes(title) ? "-" : "+";

    // cardsDiv deve existir se você estiver expandindo listas com cartões
    const cardsDiv = document.createElement("div");
    cardsDiv.className = "sidebar-cards";
    // cardsDiv.style.display = expandedLists.includes(title) ? "block" : "none";

    toggleBtn.addEventListener("click", () => {
        const isExpanded = cardsDiv.style.display === "block";

        if (isExpanded) {
            cardsDiv.style.display = "none";
            toggleBtn.textContent = "+";
            const index = expandedLists.indexOf(title);
            if (index !== -1) expandedLists.splice(index, 1);
        } else {
            cardsDiv.style.display = "block";
            toggleBtn.textContent = "-";
            if (!expandedLists.includes(title)) expandedLists.push(title);
        }
    });

    listDiv.appendChild(titleSpan);
    listDiv.appendChild(toggleBtn);
    container.appendChild(listDiv);
    container.appendChild(cardsDiv);

</script>

